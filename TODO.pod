# PODNAME: Neo4j::Driver::TODO
# ABSTRACT: Information on planned improvements to Neo4j::Driver

=encoding utf8

=head1 TODO

=head2 Address open issues on GitHub

See L<https://github.com/johannessen/neo4j-driver-perl/issues>.

=head2 Functionality and API

=over

=item * Implement spatial and temporal types.

=item * Add timers to L<Neo4j::Driver::ResultSummary> (see C<Neo4j::Bolt>).
Method names should be C<result_available_after> and C<result_consumed_after>,
both returning milliseconds with a default of C<-1> when unavailable (HTTP).

=back

=head2 Experimental features

=over

=item * L<Neo4j::Driver::Result/"Look ahead in the result stream">:
make C<peek()> stable once C<fetch()> reliably buffers two records

=item * L<Neo4j::Driver::Session/"Concurrent transactions">: make illegal
for both nested explicit and nested autocommit transactions (for
consistency with Bolt), but provide a driver config option (e. g.
C<< nested_transactions => 1 >>) that lifts this restriction for HTTP

Note that L<Neo4j 4.4|https://neo4j.com/release-notes/database/neo4j-4-4-0/>
added what looks like nested tx for Bolt using C<CALL {…} TRANSACTIONS>.
Needs investigation.

=item * Calling list methods in scalar context
(L<in Node|Neo4j::Driver::Type::Node/"Calling in scalar context">,
L<in Path|Neo4j::Driver::Type::Path/"Calling in scalar context">,
L<in Result|Neo4j::Driver::Result/"Calling in scalar context">, and
L<in ResultSummary|Neo4j::Driver::ResultSummary/"Calling in scalar context">):
make stable

=back

=head2 Tests, code quality, documentation

=over

=item * Test roundtrip of special numeric values
(very large integers, -0.0, ±Inf, ±NaN).

=item * Improve test coverage:

=over

=item * Many yet uncovered code paths are obviously fine, but difficult or
impossible to cover. In some of these cases, it may be possible to refactor the
code, such as by banking on autovivification (i.e. don't defend against undefined
C<$a> in expressions like C<< $a->{b} >>; see L<perlref/"Using References">).

=item * The C<deep_bless> subs contain a lot of assertions and other checks
that are not normally necessary. Since this logic seems to work fine, it should
be simplified. (This may also make it easier to unroll the recursion later.)

=item * Documenting each attribute in L<Neo4j::Driver::SummaryCounters> as individual
methods might be a quick way to bring up the B<pod> coverage stats a bit.

=back

=item * Write new unit tests for all modules.
Tests should probably live in files with names that are a good match for module
names, so that it's easy to find test for a specific module (Simulator and live
tests should perhaps be in separate files and directories.) The article
L<Perl Testing in 2023|https://toby.ink/blog/2023/01/24/perl-testing-in-2023/>
has some insight into how L<Test2> can simplify unit tests.

=item * Optimise the simulator for C<$hash = 0>.
Use of C<<< << >>> causes statements to end with C<\n>, which the simulator
could filter out. 
The internals test "transaction: REST 404 error handling" should run a distinct
statement.

=item * Consider migrating the LWP tests away from L<Mock::Quick> to reduce
the dependency chain (L<Mock::MonkeyPatch> and L<Mock::Sub> look extremely
light-weight, alternatives might I<perhaps> be L<Test::MockObject::Extends>
or L<Test::LWP::UserAgent>).

=item * Verify that L<Neo4j::Driver::Type::Node/"get"> and
L<Neo4j::Driver::Type::Relationship/"get"> really do return undef
(as documented), even when called in list context.

=item * Check that after a server error, the next statement will succeed
(there I<might> be issues with perlbolt; see
L<majensen/libneo4j-client#8|https://github.com/majensen/libneo4j-client/commit/3bec0ff2306f4d282d36e1a036f828e882dc7426>).

=item * List possible C<croak> output in L<Neo4j::Driver/"DIAGNOSTICS">,
allowing for indexing by search engines.

=item * We need complete working code examples, such as that Neo4j movies app.
Some of the deprecated functionality could also be implemented as plug-ins
in a dist named S<e. g.> Neo4j::Driver::Net::HTTP::Extra. Such a plug-in might
be directly useful to some users, but most importantly, it would serve to
demonstrate some of the plug-in API's functionality and how that can be used.

=item * We don't really target
L<AuraDB|https://neo4j.com/cloud/platform/aura-graph-database/> or
L<Memgraph|https://memgraph.com> etc., but it might nevertheless be
interesting to actually try those some time.

=back

=head1 Other ideas for specific modules

=head2 L<Neo4j::Driver>

=over

=item * The C<neo4j> scheme should work for a community edition server out
of the box. For starters, C<neo4j> should check if L<Neo4j::Bolt> is loaded
into C<%INC> and if the specified server actually supports Bolt. If so, it
should behave identically to C<bolt>, otherwise if should behave identically
to either C<http> or C<https>, depending on the encryption config.
This behaviour is different than that of the official drivers; see also
L<https://community.neo4j.com/t/different-between-neo4j-and-bolt/18498>.
It should be sufficient to document that the behaviour is subject to
change (clusters are enterprise-only and therefore currently out of scope,
and the conditions under which Bolt is chosen may also change in future).

=item * Change the default URI scheme from C<http> to C<neo4j>. Because
a C<use Neo4j::Bolt;> statement has so far never been necessary for the
driver and the driver's behaviour won't change if it is not present, and
also because HTTP-only features have so far been experimental features
only, this should not be a breaking change.

=item * Convert the "unsupported option" check from C<grep> to
L<List::Util/"none"> (in C<config()> and C<_parse_options()>;
slightly improves both performance and clarity).

=item * A reliable C<connection_timeout> config option might be good.
Not exactly sure how to achieve that across Bolt, LWP etc. Googling yields
L<IO::Socket::Timeout> and C<SocketConnectTimeout>, but I haven't really
researched further.

=back

=head2 Neo4j::Driver::Events

=over

=item * The default implementation of the "error" event currently tries to
more or less recreate the old error message strings. Looking forward, having
L<Neo4j::Error> overload stringification and just throwing an object exception
might be an interesting option. However, we likely would have to roll C<croak>
ourselves (see L<Carp/"BUGS">). See L<https://perldoc.perl.org/functions/die>
for the special meaning of C<\n>.

=back

=head2 L<Neo4j::Driver::Session>

=over

=item * For the transaction functions, there is technically no guarantee
that C<$_> will contain the exception we need it to contain; see
L<Try::Tiny/"CAVEATS">. This should I<perhaps> be changed to something
like L<Feature::Compat::Try> eventually (which is, however, effectively
an XS module on older Perls without C<feature 'try'>).

=item * Add transaction configuration; see:
L<https://neo4j.com/docs/http-api/4.4/actions/transaction-configuration/>

=back

=head2 L<Neo4j::Driver::Transaction>

=over

=item * Consider supporting re-using C<Record> objects for query parameters in
C<run>. The Java and C# drivers do this.

=item * Run statements lazily: Just like with the official drivers, statements
passed to C<run> should be gathered until their results are actually accessed.
Then, and only then, all statements gathered so far should be sent to the
server using a single request. Challenges of this approach include that
notifications are not associated with a single statement, so there must be an
option to disable this behaviour; indeed, disabled should probably be the
default when stats are requested. Additionally, there are some bugs with
multiple statements (see tests C<non-arrayref individual statement> and
C<include empty statement>). Since stats are now requested by default,
this item might mean investing time in developing an optimisation
feature that is almost never used. Since the server is often run on localhost
anyway where latency is very close to zero, this item should not have high
priority.

=back

=head2 L<Neo4j::Driver::Record>

=over

=item * Consider whether to implement methods to query the list of fields for
this record (C<keys>, C<has>, C<size>) and/or a mapping function for all fields
(C<map>/C<forEach>). Given that this data should easily be available through
the Result object, these seem slightly superfluous though.

=item * Implement C<graph>; see
L<https://github.com/neo4j/neo4j/blob/3.5/community/server/src/main/java/org/neo4j/server/rest/transactional/GraphExtractionWriter.java>,
L<https://github.com/neo4j/neo4j-python-driver/wiki/1.6-changelog#160a1>.
L<https://github.com/neo4j/neo4j-javascript-driver/issues/140#issuecomment-247203874>.

=item * Add C<field()> as alias for C<get()>, enabling clients to avoid the
possibly confusing C<< $record->get->get >> pattern. The official drivers
only offer C<get()>, and C<field()> might be too similar to C<fields()> in
the official Java driver, so this alias should perhaps be experimental.

See also L<https://www.nntp.perl.org/group/perl.perl5.porters/2022/06/msg264165.html>,
which makes the point that Perl is about explicitly typed operations. In this
spirit, it may make sense to offer C<field()> (only accepting field names)
I<and> C<index()> (only accepting indices). Then C<get()> would continue to
exist independently and DWIM.

=item * For the query C<RETURN 1, 0, 2 AS NaN> (in F<record.t>), C<get("2")>
should succeed. This is because in Perl, there is supposed to be no difference
between numbers and strings; there is no field with the name C<"2">, so the
field with I<index> C<2> needs to be returned instead. However, right now,
C<get("2")> dies.

=back

=head2 L<Neo4j::Driver::Result>

=over

=item * Improve documentation, esp. wrt. side-effects of e. g. C<has_next()>

=item * Perhaps C<fetch()> should always buffer two records instead of just
one. With the current implementation, the bolt connection might remain
attached longer than desirable in cases where the client knows in advance
how many records there will be and calls C<fetch()> exactly that number of
times. (In theory, such a change might even slightly improve performance
if the driver uses Perl threads to fill the buffer in the background.)

=item * C<size()> doesn't need to exhaust the result stream. It only needs to
detach it. The official drivers don't have C<size()>, so we're free to redefine
it in order to make it more useful to Perl users.

=item * Consider unrolling C<deep_bless> recursion. Based on initial profiling,
this may save up to about 5% CPU time (for a specific HTTP test query cached in
RAM, performance went from about 2700/s to 2850/s when skipping the call to
C<deep_bless> entirely). However, when accessing the database, the bottleneck
is typically I/O (querying Neo4j itself instead of the RAM-cached response let
the performance for the very same query drop down to 650/s when executed over
HTTP). So this optimisation may not be worth it (OTOH, Bolt performance was
something like 7000/s, so optimising C<deep_bless> may be more useful there).

=back

=head2 L<Neo4j::Driver::ResultColumns>

=over

=item * The entire package can probably be removed now.

=back

=head2 L<Neo4j::Driver::ResultSummary>

=over

=item * Profile the server-side performance penalty of requesting stats for
various kinds of queries. If the penalty turns out to be high, stats should
perhaps have to be requested explicitly by clients (rather than being
obtained by default, as with 0.13 and higher). However, using Bolt always
provides stats, and different APIs for HTTP and Bolt seem like a bad idea.

=item * Recent Neo4j versions have added C<database>.

=back

=head2 L<Neo4j::Driver::SummaryCounters>

=over

=item * C<use Class::Accessor::Fast 0.34;>

=item * It seems Neo4j 4 added new counters for system updates.
These are C<contains_system_updates> and C<system_updates>, the latter
returning the number of system updates. Neither is available in
L<Neo4j::Bolt> 0.4201 according to the docs; need to check source.

=back

=head2 L<Neo4j::Driver::Net>

=over

=item * As a micro-optimisation for the HTTP net adapter API, it could be
guaranteed for the C<http_header()> method that the returned hashref will not
be used by the driver/controller after the next call to C<request()>, so that
the underlying hash may be reused by the net adapter.

=back

=head2 L<Neo4j::Driver::Net::Bolt>

=over

=item * C<new()> shouldn't swallow the exception if loading
L<Neo4j::Bolt> fails; see
L<https://www.nntp.perl.org/group/perl.perl5.porters/2021/07/msg260971.html>

=item * The next major version should require a suitably new version
of L<Neo4j::Bolt> (using C<< ->VERSION(...) >>; see
L<https://github.com/libwww-perl/libwww-perl/pull/253#issuecomment-295838118>)

=item * In the case of L<perlbolt#51|https://github.com/majensen/perlbolt/issues/51>,
it might be possible to try and reconnect (once) if the connection is in fact
closed by the lib. But that shouldn't happen any more now, so I'm not sure if
this idea is worth the effort.

=back

=head2 L<Neo4j::Driver::Net::HTTP>

=over

=item * If a 201 is received without a C<Location> header, it is currently
simply ignored by C<_parse_tx_status()>. (The simulator requires this.)
According to RFC 7231, such a response means the location hasn't changed,
i. e. the resource has been created at the default transaction endpoint.
That should never happen; in fact, it should only ever happen for a PUT
request, but we don't use those here. So ignoring this is probably the right
choice. But it may still be useful to revisit this logic later on.

=item * A small memory leak exists in C<new()>. Probably no big deal.
The config rework will eventually address this.

=item * Perl HTTP libraries like L<LWP> don't report OS L<errno|Errno> codes.
(BSD: C<man 2 intro>) C<$!> is unreliable. It might be possible to recreate
errno codes by parsing error string messages.
L<mentalisttraceur/errnoname|https://github.com/mentalisttraceur/errnoname>
might be of some use there. But this idea is very likely not worth the effort.

=back

=head2 L<Neo4j::Driver::Net::HTTP::LWP>

=over

=item * Consider externalsing this as a distribution of its own now rather than
later. Eventually we might get rid of this new dependency by including an all-new
adapter for L<HTTP::Tiny>. Even before then, this new structure will make more
clear that the driver in principle supports other backends besides just L<LWP>.

=back

=head2 Neo4j::Driver::Type::*

=over

=item * The C<eq> and C<ne> operators should be overloaded to allow
for ID comparison on nodes and relationships.

=item * Consider whether to use C<use overload '%{}'> to allow direct
access to e. g. properties using the pre-0.13 hashref syntax. See
L<https://metacpan.org/pod/overload#Two-face-References> for an example.
L<perltie> might perhaps also work.
Note that L<overload> might be a memory hog; see L<Types::Serialiser/"BUGS">.

=item * Try to refactor L<Neo4j::Driver::Type::Path>'s internal representation
to allow either elements or nodes+rels. Have one autogenerate from the other,
then cache the results. May not actually have advantages for deep_bless though.

=item * Add C<property()> as alias for C<get()> in L<Neo4j::Driver::Type::Node>
and L<Neo4j::Driver::Type::Relationship>, enabling clients to avoid the
possibly confusing C<< $record->get->get >> pattern.
Another way to avoid this pattern would be C<< $record->get->properties->{} >>.
Aside from being longer, this is also S<50 %> slower because of the defensive
copy that needs to be created. We should probably cache that one at least.
In the long run, the internal representation of these types will change;
the C<properties()> hash ref will then actually be the fastest way to get a
single property (about 8% faster than C<get()>).

=back
