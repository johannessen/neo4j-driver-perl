
=encoding utf8

=head1 TODO

This software has pre-release quality. The interface is not yet stable.

=head2 L<Neo4j::Driver>

=over

=item * Write tests.

=item * HTTPS support.

=item * The current C<close> method is a no-op. Perhaps it should behave like
the session C<close> method; see below.

=item * Consider if the 6 second timeout is too long. It should in fact be as
short as reasonably possible.

=item * Should we plan to support Casual Clusters?

=back

=head2 L<Neo4j::Driver::Session>

=over

=item * Support for persistent connections would be nice.

=item * Sessions should offer a C<close> method that automatically rolls back
and terminates all currently open transactions. The current C<close> method is
a no-op, which needs to be fixed.
Bolt support B<needs> something like this!

=item * Sessions of some of the official drivers can have at most one
transaction running at a time. This restriction is not necessary for this Perl
driver because L<REST::Client> works fine without it. Perhaps we should
implement it anyway for consistency; however, the Python driver docs explicitly
say that a "Session is a logical container for one or more transactional units
of work".

=back

=head2 L<Neo4j::Driver::Transaction>

=over

=item * The option to send multiple statements at once should no longer be
exposed to the client. It should only be used internally for running statements
lazily.

=item * Consider unrolling C<deep_bless> recursion. Based on initial profiling,
this may save up to about 5% CPU time (for a specific HTTP test query cached in
RAM, performance went from about 2700/s to 2850/s when skipping the call to
C<deep_bless> entirely). However, when accessing the database, the bottleneck
is typically I/O (querying Neo4j itself instead of the RAM-cached response let
the performance for the very same query drop down to 650/s when executed over
HTTP). So this optimisation may not be worth it (OTOH, Bolt performance was
something like 7000/s, so optimising C<deep_bless> may be more useful there).

=item * An alternative to using C<< $client->{_res}->status_line >>
(to get the HTTP error message) might be to call
C<< $client->getUseragent->add_handler(response_header => sub { $status_line = shift->status_line }) >>.
However, this is probably slower and would likely need to be run for each and
every POST including those with C<2xx> status codes, which might not be
acceptable.

=item * Disabling C<die_on_error> probably makes errors harder to find, but has
no clear advantages. In particular, errors are often missing the proper header
fields for the commit URL etc., so it's likely the failed request doesn't
produce useful return values and the next request will fail anyway with a
misleading error message due to the URLs being corrupted. This feature is not
present in the official drivers anyway; it was inspired by Neo4p and should
probably be removed completely.

=item * Consider supporting re-using C<Record> objects for query parameters in
C<run>. The Java and C# drivers do this.

=item * Profile whether C<Tie::IxHash> or sorting C<JSON:PP> is quicker and
adjust the code accordingly.

=item * Investigate which JSON module is the best. While C<Cpanel::JSON::XS>
may have some advantages in terms of correctness (I think?), maybe
C<JSON::MaybeXS> is more compatible.

=item * Run statements lazily: Just like with the official drivers, statements
passed to C<run> should be gathered until their results are actually accessed.
Then, and only then, all statements gathered so far should be sent to the
server using a single request. Challenges of this approach include that
notifications are not associated with a single statement, so there must be an
option to disable this behaviour; indeed, disabled should probably be the
default when stats are requested. Additionally, there are some bugs with
multiple statements (see tests C<non-arrayref individual statement> and
C<include empty statement>). Since stats are now requested by default,
this item might mean investing time in developing an optimisation
feature that is almost never used. Since the server is often run on localhost
anyway where latency is very close to zero, this item should not have high
priority.

=item * Replace old C<{}> parameter style with new C<$> style; see
L<https://neo4j.com/docs/cypher-manual/current/deprecations-additions-removals-compatibility/>.

=back

=head2 L<Neo4j::Driver::StatementResult>

=over

=item * Implement a stream iterator (for Bolt as well as HTTP).

=back

=head2 L<Neo4j::Driver::Record>

=over

=item * B<Bugfix:> C<get> should croak if the call is ambiguous (i. e., there's
more than one field but the field to get is not specified by argument). Note,
though, that the Python driver intentionally does deliver the first field only
in this exact scenario (though its method is called C<value> instead of
C<get>).

=item * Consider whether to implement methods to query the list of fields for
this record (C<keys>, C<has>, C<size>) and/or a mapping function for all fields
(C<map>/C<forEach>). Given that this data should easily be available through
the StatementResult object, these seem slightly superfluous though.

=item * Implement C<graph>; see
L<https://github.com/neo4j/neo4j/blob/3.5/community/server/src/main/java/org/neo4j/server/rest/transactional/GraphExtractionWriter.java>,
L<https://github.com/neo4j/neo4j-python-driver/wiki/1.6-changelog#160a1>.

=back

=head2 L<Neo4j::Driver::ResultColumns>

=over

=item * B<Bugfix:> The C<get> method behaves unpredictably for queries
that have fields with conflicting indexes and keys such as C<RETURN 1, 0>.
It would technically be possible to distinguish between a key and an index
by inspecting the scalar's FLAGS (namely, C<POK>/C<IOK>; see
L<https://metacpan.org/pod/Devel::Peek#EXAMPLES> and C<JSON::PP>'s
C<_looks_like_number>). Then C<get(0)> would mean I<index> C<0> and C<get('0')>
would mean I<key> C<0>. Not sure if this is the best approach though.
(FWIW, it's exactly what the JS driver does.)

=item * The C<list> implementation is quite ugly and probably has bugs with
regards to index/key collisions.

=back

=head2 L<Neo4j::Driver::ResultSummary>

=over

=item * Profile the server-side performance penalty of requesting stats for
various kinds of queries. If the penalty turns out to be high, stats should
perhaps have to be requested explicitly by clients (rather than being
obtained by default, as with 0.13 and higher). However, using Bolt always
provides stats, and different APIs for HTTP and Bolt seem like a bad idea.

=back

=head2 L<Neo4j::Driver::SummaryCounters>

=over

=item * C<use Class::Accessor::Fast 0.34;>

=back

=head2 Neo4j::Driver::Type::*

=over

=item * Implement spatial and temporal types.

=item * The C<eq> and C<ne> operators should be overloaded to allow
for ID comparison on nodes and relationships.

=item * Consider whether to use C<use overload '%{}'> to allow direct
access to e. g. properties using the pre-0.13 hashref syntax. See
L<https://metacpan.org/pod/overload#Two-face-References> for an example.

=back
